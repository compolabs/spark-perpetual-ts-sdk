/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  Bytes,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum ErrorInput { AccessDenied = 'AccessDenied', InvalidPythFeePayment = 'InvalidPythFeePayment', DebugModeRequired = 'DebugModeRequired' };
export enum ErrorOutput { AccessDenied = 'AccessDenied', InvalidPythFeePayment = 'InvalidPythFeePayment', DebugModeRequired = 'DebugModeRequired' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type I64Input = { underlying: BigNumberish };
export type I64Output = { underlying: BN };
export type SparkContractsInput = { version: BigNumberish, account_balance: ContractIdInput, clearing_house: ContractIdInput, insurance_fund: ContractIdInput, perp_market: ContractIdInput, pyth: ContractIdInput, treasury: IdentityInput, vault: ContractIdInput };
export type SparkContractsOutput = { version: BN, account_balance: ContractIdOutput, clearing_house: ContractIdOutput, insurance_fund: ContractIdOutput, perp_market: ContractIdOutput, pyth: ContractIdOutput, treasury: IdentityOutput, vault: ContractIdOutput };

export type ProxyConfigurables = Partial<{
  OWNER: IdentityInput;
  DEBUG_STEP: Option<BigNumberish>;
  SETTLEMENT_TOKEN_PRICE_FEED: string;
  BASE_ASSET_ID: AssetIdInput;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum proxy_abi::errors::Error",
      "concreteTypeId": "4b2f5246bc6b579f88e3978005a5108f324fd6ef399bcc579a63a0035591d08b",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 1
    },
    {
      "type": "enum std::option::Option<u64>",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "metadataTypeId": 2,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "struct compolabs_sway_libs::signed_integers::i64::I64",
      "concreteTypeId": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce",
      "metadataTypeId": 5
    },
    {
      "type": "struct proxy_abi::data_structures::SparkContracts",
      "concreteTypeId": "266700d96c43468fc7fd7fea63bd1d03e8b9c99981d8509b04ba45a7cea993ad",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::bytes::Bytes",
      "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 11
    },
    {
      "type": "struct std::vec::Vec<b256>",
      "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
      "metadataTypeId": 13,
      "typeArguments": [
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
      ]
    },
    {
      "type": "struct std::vec::Vec<struct proxy_abi::data_structures::SparkContracts>",
      "concreteTypeId": "d2c7ffb12b3df7a0a213f62d0df71aedf5131ef62a6fc3aa26f105c177c5c75e",
      "metadataTypeId": 13,
      "typeArguments": [
        "266700d96c43468fc7fd7fea63bd1d03e8b9c99981d8509b04ba45a7cea993ad"
      ]
    },
    {
      "type": "struct std::vec::Vec<struct std::bytes::Bytes>",
      "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5",
      "metadataTypeId": 13,
      "typeArguments": [
        "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "enum proxy_abi::errors::Error",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "AccessDenied",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "InvalidPythFeePayment",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "DebugModeRequired",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 11
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 3
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 3
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 4
    },
    {
      "type": "struct compolabs_sway_libs::signed_integers::i64::I64",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "underlying",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct proxy_abi::data_structures::SparkContracts",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "version",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "account_balance",
          "typeId": 11
        },
        {
          "name": "clearing_house",
          "typeId": 11
        },
        {
          "name": "insurance_fund",
          "typeId": 11
        },
        {
          "name": "perp_market",
          "typeId": 11
        },
        {
          "name": "pyth",
          "typeId": 11
        },
        {
          "name": "treasury",
          "typeId": 1
        },
        {
          "name": "vault",
          "typeId": 11
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "buf",
          "typeId": 10
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 4
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "ptr",
          "typeId": 4
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "buf",
          "typeId": 12,
          "typeArguments": [
            {
              "name": "",
              "typeId": 3
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        3
      ]
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "debug_increment_timestamp",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "price_feed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "price",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "debug_set_price",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "account_balance",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "clearing_house",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "insurance_fund",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "perp_market",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "pyth",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "treasury",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "vault",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "publish_new_version",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "price_feed_ids",
          "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198"
        },
        {
          "name": "price_update_data",
          "concreteTypeId": "2601885b27af3627b8910876fc176d900cec2b16ec78c538f5f312e785d915f5"
        }
      ],
      "name": "update_price",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "amount",
          "concreteTypeId": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce"
        }
      ],
      "name": "debug_modify_owed_realized_pnl",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "current_twap",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "debug_setup_twap",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_all_spark_contracts_versions",
      "output": "d2c7ffb12b3df7a0a213f62d0df71aedf5131ef62a6fc3aa26f105c177c5c75e",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "price_feed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "get_price",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_spark_contracts",
      "output": "266700d96c43468fc7fd7fea63bd1d03e8b9c99981d8509b04ba45a7cea993ad",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "version",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "get_spark_contracts_by_version",
      "output": "266700d96c43468fc7fd7fea63bd1d03e8b9c99981d8509b04ba45a7cea993ad",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "timestamp",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "version",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "5417639340512335775",
      "concreteTypeId": "4b2f5246bc6b579f88e3978005a5108f324fd6ef399bcc579a63a0035591d08b"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "OWNER",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "offset": 35872
    },
    {
      "name": "DEBUG_STEP",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "offset": 35856
    },
    {
      "name": "SETTLEMENT_TOKEN_PRICE_FEED",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 35912
    },
    {
      "name": "BASE_ASSET_ID",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "offset": 35824
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "c2f72ddff6a2342a496d7061819cba4ccf89e33d0afc51fd61a0ac42fb538e17",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class ProxyInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    debug_increment_timestamp: FunctionFragment;
    debug_set_price: FunctionFragment;
    publish_new_version: FunctionFragment;
    update_price: FunctionFragment;
    debug_modify_owed_realized_pnl: FunctionFragment;
    debug_setup_twap: FunctionFragment;
    get_all_spark_contracts_versions: FunctionFragment;
    get_price: FunctionFragment;
    get_spark_contracts: FunctionFragment;
    get_spark_contracts_by_version: FunctionFragment;
    timestamp: FunctionFragment;
    version: FunctionFragment;
  };
}

export class Proxy extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ProxyInterface;
  declare functions: {
    debug_increment_timestamp: InvokeFunction<[], void>;
    debug_set_price: InvokeFunction<[price_feed: string, price: BigNumberish], void>;
    publish_new_version: InvokeFunction<[account_balance: ContractIdInput, clearing_house: ContractIdInput, insurance_fund: ContractIdInput, perp_market: ContractIdInput, pyth: ContractIdInput, treasury: IdentityInput, vault: ContractIdInput], void>;
    update_price: InvokeFunction<[price_feed_ids: Vec<string>, price_update_data: Vec<Bytes>], void>;
    debug_modify_owed_realized_pnl: InvokeFunction<[trader: IdentityInput, amount: I64Input], void>;
    debug_setup_twap: InvokeFunction<[base_token: AssetIdInput, current_twap: BigNumberish], void>;
    get_all_spark_contracts_versions: InvokeFunction<[], Vec<SparkContractsOutput>>;
    get_price: InvokeFunction<[price_feed: string], BN>;
    get_spark_contracts: InvokeFunction<[], SparkContractsOutput>;
    get_spark_contracts_by_version: InvokeFunction<[version: BigNumberish], SparkContractsOutput>;
    timestamp: InvokeFunction<[], BN>;
    version: InvokeFunction<[], BN>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
