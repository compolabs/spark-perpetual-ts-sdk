/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
  StrSlice,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum ErrorInput { AccessDenied = 'AccessDenied', MarketAlreadyExists = 'MarketAlreadyExists', MarketNotFound = 'MarketNotFound', MarketNotPaused = 'MarketNotPaused', NoOrdersFound = 'NoOrdersFound', OrdersCantBeMatched = 'OrdersCantBeMatched', NoMarketPriceForMarket = 'NoMarketPriceForMarket', ZeroSize = 'ZeroSize' };
export enum ErrorOutput { AccessDenied = 'AccessDenied', MarketAlreadyExists = 'MarketAlreadyExists', MarketNotFound = 'MarketNotFound', MarketNotPaused = 'MarketNotPaused', NoOrdersFound = 'NoOrdersFound', OrdersCantBeMatched = 'OrdersCantBeMatched', NoMarketPriceForMarket = 'NoMarketPriceForMarket', ZeroSize = 'ZeroSize' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum MarketEventIdentifierInput { MarketCreateEvent = 'MarketCreateEvent', MarketCloseEvent = 'MarketCloseEvent', MarketPauseEvent = 'MarketPauseEvent', MarketUnpauseEvent = 'MarketUnpauseEvent' };
export enum MarketEventIdentifierOutput { MarketCreateEvent = 'MarketCreateEvent', MarketCloseEvent = 'MarketCloseEvent', MarketPauseEvent = 'MarketPauseEvent', MarketUnpauseEvent = 'MarketUnpauseEvent' };
export enum MarketStatusInput { Opened = 'Opened', Paused = 'Paused', Closed = 'Closed' };
export enum MarketStatusOutput { Opened = 'Opened', Paused = 'Paused', Closed = 'Closed' };
export enum OrderEventIdentifierInput { OrderOpenEvent = 'OrderOpenEvent', OrderRemoveUncollaterizedEvent = 'OrderRemoveUncollaterizedEvent', OrderRemoveEvent = 'OrderRemoveEvent', OrderRemoveAllEvent = 'OrderRemoveAllEvent', OrderMatchEvent = 'OrderMatchEvent', OrderFulfillEvent = 'OrderFulfillEvent' };
export enum OrderEventIdentifierOutput { OrderOpenEvent = 'OrderOpenEvent', OrderRemoveUncollaterizedEvent = 'OrderRemoveUncollaterizedEvent', OrderRemoveEvent = 'OrderRemoveEvent', OrderRemoveAllEvent = 'OrderRemoveAllEvent', OrderMatchEvent = 'OrderMatchEvent', OrderFulfillEvent = 'OrderFulfillEvent' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type I64Input = { underlying: BigNumberish };
export type I64Output = { underlying: BN };
export type MarketInput = { asset_id: AssetIdInput, decimal: BigNumberish, price_feed: string, im_ratio: BigNumberish, mm_ratio: BigNumberish, status: MarketStatusInput, paused_index_price: Option<BigNumberish>, paused_timestamp: Option<BigNumberish>, closed_price: Option<BigNumberish> };
export type MarketOutput = { asset_id: AssetIdOutput, decimal: number, price_feed: string, im_ratio: BN, mm_ratio: BN, status: MarketStatusOutput, paused_index_price: Option<BN>, paused_timestamp: Option<BN>, closed_price: Option<BN> };
export type MarketEventInput = { market: MarketInput, sender: IdentityInput, timestamp: BigNumberish, identifier: MarketEventIdentifierInput };
export type MarketEventOutput = { market: MarketOutput, sender: IdentityOutput, timestamp: BN, identifier: MarketEventIdentifierOutput };
export type OrderInput = { id: string, trader: IdentityInput, base_token: AssetIdInput, base_size: I64Input, price: BigNumberish };
export type OrderOutput = { id: string, trader: IdentityOutput, base_token: AssetIdOutput, base_size: I64Output, price: BN };
export type OrderEventInput = { order_id: string, order: Option<OrderInput>, sender: IdentityInput, timestamp: BigNumberish, identifier: OrderEventIdentifierInput };
export type OrderEventOutput = { order_id: string, order: Option<OrderOutput>, sender: IdentityOutput, timestamp: BN, identifier: OrderEventIdentifierOutput };
export type TradeEventInput = { base_token: AssetIdInput, seller: IdentityInput, buyer: IdentityInput, trade_size: BigNumberish, trade_price: BigNumberish, sell_order_id: string, buy_order_id: string, timestamp: BigNumberish };
export type TradeEventOutput = { base_token: AssetIdOutput, seller: IdentityOutput, buyer: IdentityOutput, trade_size: BN, trade_price: BN, sell_order_id: string, buy_order_id: string, timestamp: BN };
export type TwapInput = { base_token: AssetIdInput, span: BigNumberish, current_twap: BigNumberish, last_update: BigNumberish };
export type TwapOutput = { base_token: AssetIdOutput, span: BN, current_twap: BN, last_update: BN };

export type PerpMarketConfigurables = Partial<{
  DUST: BigNumberish;
  VERSION: BigNumberish;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(b256, b256, enum std::identity::Identity, enum std::identity::Identity, struct std::asset_id::AssetId, u64, u64)",
      "concreteTypeId": "805825741793936cc276abb70f75c8358b16167eb63d15c60abb3ef1b9b36bad",
      "metadataTypeId": 3
    },
    {
      "type": "(enum std::identity::Identity, struct std::asset_id::AssetId, u64, u64)",
      "concreteTypeId": "b034117bcdcd8bf7454a53b570b4b591df678a9830bfb5a58b02b8fdc2d87d4c",
      "metadataTypeId": 2
    },
    {
      "type": "(enum std::option::Option<struct perp_market_abi::data_structures::Twap>, enum std::option::Option<struct perp_market_abi::data_structures::Twap>)",
      "concreteTypeId": "70ce4f9303d4050cf8e516d6bb5a1de4803916f9cfab16fe5a878fe30bc6b12c",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum perp_market_abi::errors::Error",
      "concreteTypeId": "7861bf485e22ef4bc3d8c97682388423706f1645ba4187ed42f0db6ca64afd3b",
      "metadataTypeId": 7
    },
    {
      "type": "enum standards::src5::AccessError",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
      "metadataTypeId": 8
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 9
    },
    {
      "type": "enum std::option::Option<struct perp_market_abi::data_structures::Market>",
      "concreteTypeId": "bede0a7be2248169771c17bad34a6bc85260eb58d3ea6f145d1e0078344fae93",
      "metadataTypeId": 10,
      "typeArguments": [
        "26a068f16d5814d69f54c8106a03c4adede0fba494eb23e8f2d48c0d3f449876"
      ]
    },
    {
      "type": "enum std::option::Option<struct perp_market_abi::data_structures::Order>",
      "concreteTypeId": "e0cbf0dbb779b64e7cadf8373c4fb3e157a4ec08149ecb707e9ff7f3bd1a27e8",
      "metadataTypeId": 10,
      "typeArguments": [
        "95d2a1a4876bbe2364a7435ed483aab26d7e733a44262235e0017fd5cb70c05c"
      ]
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct compolabs_sway_libs::signed_integers::i64::I64",
      "concreteTypeId": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce",
      "metadataTypeId": 13
    },
    {
      "type": "struct events::MarketEvent",
      "concreteTypeId": "065fbff4f6bcd334fba9393f563684d0855bf9a783ff7c0d21a1009a809e298a",
      "metadataTypeId": 14
    },
    {
      "type": "struct events::OrderEvent",
      "concreteTypeId": "d76b2c2db6e6d727cc4672c51a69e4683505c207adccf614f9cef0c03f256e06",
      "metadataTypeId": 15
    },
    {
      "type": "struct events::TradeEvent",
      "concreteTypeId": "7a0d594453089f5b4287d95d563bec621cd86c745d28c029ffa314f094289664",
      "metadataTypeId": 16
    },
    {
      "type": "struct perp_market_abi::data_structures::Market",
      "concreteTypeId": "26a068f16d5814d69f54c8106a03c4adede0fba494eb23e8f2d48c0d3f449876",
      "metadataTypeId": 17
    },
    {
      "type": "struct perp_market_abi::data_structures::Order",
      "concreteTypeId": "95d2a1a4876bbe2364a7435ed483aab26d7e733a44262235e0017fd5cb70c05c",
      "metadataTypeId": 18
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 21
    },
    {
      "type": "struct std::vec::Vec<b256>",
      "concreteTypeId": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
      "metadataTypeId": 24,
      "typeArguments": [
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
      ]
    },
    {
      "type": "struct std::vec::Vec<struct perp_market_abi::data_structures::Order>",
      "concreteTypeId": "d3af4b64cab77d46c518631244055968c5ca9ad8016224a5ce529e09a0916c0f",
      "metadataTypeId": 24,
      "typeArguments": [
        "95d2a1a4876bbe2364a7435ed483aab26d7e733a44262235e0017fd5cb70c05c"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 19
            }
          ]
        },
        {
          "name": "__tuple_element",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 19
            }
          ]
        }
      ]
    },
    {
      "type": "(_, _, _, _)",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 9
        },
        {
          "name": "__tuple_element",
          "typeId": 21
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _, _, _, _, _, _)",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "__tuple_element",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "__tuple_element",
          "typeId": 9
        },
        {
          "name": "__tuple_element",
          "typeId": 9
        },
        {
          "name": "__tuple_element",
          "typeId": 21
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "enum events::MarketEventIdentifier",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "MarketCreateEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketCloseEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketPauseEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketUnpauseEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum events::OrderEventIdentifier",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "OrderOpenEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrderRemoveUncollaterizedEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrderRemoveEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrderRemoveAllEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrderMatchEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrderFulfillEvent",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum perp_market_abi::data_structures::MarketStatus",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "Opened",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Paused",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Closed",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum perp_market_abi::errors::Error",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "AccessDenied",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketAlreadyExists",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketNotFound",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MarketNotPaused",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NoOrdersFound",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "OrdersCantBeMatched",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NoMarketPriceForMarket",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "ZeroSize",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::AccessError",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "NotOwner",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "Address",
          "typeId": 20
        },
        {
          "name": "ContractId",
          "typeId": 22
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 11
        }
      ],
      "typeParameters": [
        11
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 11
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 12
    },
    {
      "type": "struct compolabs_sway_libs::signed_integers::i64::I64",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "underlying",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::MarketEvent",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "market",
          "typeId": 17
        },
        {
          "name": "sender",
          "typeId": 9
        },
        {
          "name": "timestamp",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "identifier",
          "typeId": 4
        }
      ]
    },
    {
      "type": "struct events::OrderEvent",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "order_id",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "order",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 18
            }
          ]
        },
        {
          "name": "sender",
          "typeId": 9
        },
        {
          "name": "timestamp",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "identifier",
          "typeId": 5
        }
      ]
    },
    {
      "type": "struct events::TradeEvent",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "base_token",
          "typeId": 21
        },
        {
          "name": "seller",
          "typeId": 9
        },
        {
          "name": "buyer",
          "typeId": 9
        },
        {
          "name": "trade_size",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "trade_price",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "sell_order_id",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "buy_order_id",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "timestamp",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct perp_market_abi::data_structures::Market",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "asset_id",
          "typeId": 21
        },
        {
          "name": "decimal",
          "typeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        },
        {
          "name": "price_feed",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "im_ratio",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "mm_ratio",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "status",
          "typeId": 6
        },
        {
          "name": "paused_index_price",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
            }
          ]
        },
        {
          "name": "paused_timestamp",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
            }
          ]
        },
        {
          "name": "closed_price",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
            }
          ]
        }
      ]
    },
    {
      "type": "struct perp_market_abi::data_structures::Order",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "id",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "trader",
          "typeId": 9
        },
        {
          "name": "base_token",
          "typeId": 21
        },
        {
          "name": "base_size",
          "typeId": 13
        },
        {
          "name": "price",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct perp_market_abi::data_structures::Twap",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "base_token",
          "typeId": 21
        },
        {
          "name": "span",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "current_twap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "last_update",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 20,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 21,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 22,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 23,
      "components": [
        {
          "name": "ptr",
          "typeId": 12
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        11
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 24,
      "components": [
        {
          "name": "buf",
          "typeId": 23,
          "typeArguments": [
            {
              "name": "",
              "typeId": 11
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        11
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "cancel_all_orders_m",
      "output": "32559685d0c9845f059bf9d472a0a38cf77d36c23dfcffe5489e86a65cdd9198",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "order_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "cancel_order_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "close_price",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "close_market_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "decimal",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        },
        {
          "name": "price_feed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "im_ratio",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "mm_ratio",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "initial_price",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "create_market_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_size",
          "concreteTypeId": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce"
        },
        {
          "name": "order_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "fulfill_order_m",
      "output": "b034117bcdcd8bf7454a53b570b4b591df678a9830bfb5a58b02b8fdc2d87d4c",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "order1_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "order2_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "match_orders_m",
      "output": "805825741793936cc276abb70f75c8358b16167eb63d15c60abb3ef1b9b36bad",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "base_size",
          "concreteTypeId": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce"
        },
        {
          "name": "price",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "open_order_m",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "pause_market_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "unpause_market_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "mark_span",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "update_mark_span_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "market_span",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "update_market_span_m",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_latest_twap_m",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_mark_price_m",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_mark_span",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_market_m",
      "output": "bede0a7be2248169771c17bad34a6bc85260eb58d3ea6f145d1e0078344fae93",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_market_price_m",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_market_span",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "order_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "get_order_m",
      "output": "e0cbf0dbb779b64e7cadf8373c4fb3e157a4ec08149ecb707e9ff7f3bd1a27e8",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_total_trader_order_base_m",
      "output": "c35f504fa0cf6c3c54066e2780bc4033982f9a802842793a014ba0f5c699d8ce",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_trader_orders_m",
      "output": "d3af4b64cab77d46c518631244055968c5ca9ad8016224a5ce529e09a0916c0f",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_twaps_m",
      "output": "70ce4f9303d4050cf8e516d6bb5a1de4803916f9cfab16fe5a878fe30bc6b12c",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "base_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "has_active_orders_by_token_m",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "trader",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "has_active_orders_m",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "15522549115516278567",
      "concreteTypeId": "d76b2c2db6e6d727cc4672c51a69e4683505c207adccf614f9cef0c03f256e06"
    },
    {
      "logId": "8674424674830184267",
      "concreteTypeId": "7861bf485e22ef4bc3d8c97682388423706f1645ba4187ed42f0db6ca64afd3b"
    },
    {
      "logId": "459296745847575348",
      "concreteTypeId": "065fbff4f6bcd334fba9393f563684d0855bf9a783ff7c0d21a1009a809e298a"
    },
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "logId": "8794783797310168923",
      "concreteTypeId": "7a0d594453089f5b4287d95d563bec621cd86c745d28c029ffa314f094289664"
    },
    {
      "logId": "4571204900286667806",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "DUST",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 75376
    },
    {
      "name": "VERSION",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc",
      "offset": 75384
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "6e7d3c6687e6625ea8a349e09f5bf8c115f714284d17099f58cf6ac3f4af10a2",
    "value": "0000000000000384000000000000000000000000000000000000000000000000"
  },
  {
    "key": "caac9dc1965b44f14dfe2f35967930387e0172493acb32025d0dea901cbad807",
    "value": "0000000000000e10000000000000000000000000000000000000000000000000"
  }
];

export class PerpMarketInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    cancel_all_orders_m: FunctionFragment;
    cancel_order_m: FunctionFragment;
    close_market_m: FunctionFragment;
    create_market_m: FunctionFragment;
    fulfill_order_m: FunctionFragment;
    match_orders_m: FunctionFragment;
    open_order_m: FunctionFragment;
    pause_market_m: FunctionFragment;
    unpause_market_m: FunctionFragment;
    update_mark_span_m: FunctionFragment;
    update_market_span_m: FunctionFragment;
    get_latest_twap_m: FunctionFragment;
    get_mark_price_m: FunctionFragment;
    get_mark_span: FunctionFragment;
    get_market_m: FunctionFragment;
    get_market_price_m: FunctionFragment;
    get_market_span: FunctionFragment;
    get_order_m: FunctionFragment;
    get_total_trader_order_base_m: FunctionFragment;
    get_trader_orders_m: FunctionFragment;
    get_twaps_m: FunctionFragment;
    has_active_orders_by_token_m: FunctionFragment;
    has_active_orders_m: FunctionFragment;
  };
}

export class PerpMarket extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: PerpMarketInterface;
  declare functions: {
    cancel_all_orders_m: InvokeFunction<[trader: IdentityInput], Vec<string>>;
    cancel_order_m: InvokeFunction<[trader: IdentityInput, order_id: string], void>;
    close_market_m: InvokeFunction<[base_token: AssetIdInput, close_price: BigNumberish], void>;
    create_market_m: InvokeFunction<[base_token: AssetIdInput, decimal: BigNumberish, price_feed: string, im_ratio: BigNumberish, mm_ratio: BigNumberish, initial_price: BigNumberish], void>;
    fulfill_order_m: InvokeFunction<[base_size: I64Input, order_id: string], [IdentityOutput, AssetIdOutput, BN, BN]>;
    match_orders_m: InvokeFunction<[order1_id: string, order2_id: string], [string, string, IdentityOutput, IdentityOutput, AssetIdOutput, BN, BN]>;
    open_order_m: InvokeFunction<[trader: IdentityInput, base_token: AssetIdInput, base_size: I64Input, price: BigNumberish], string>;
    pause_market_m: InvokeFunction<[base_token: AssetIdInput], void>;
    unpause_market_m: InvokeFunction<[base_token: AssetIdInput], void>;
    update_mark_span_m: InvokeFunction<[mark_span: BigNumberish], void>;
    update_market_span_m: InvokeFunction<[market_span: BigNumberish], void>;
    get_latest_twap_m: InvokeFunction<[base_token: AssetIdInput], [BN, BN]>;
    get_mark_price_m: InvokeFunction<[token: AssetIdInput], BN>;
    get_mark_span: InvokeFunction<[], BN>;
    get_market_m: InvokeFunction<[base_token: AssetIdInput], Option<MarketOutput>>;
    get_market_price_m: InvokeFunction<[token: AssetIdInput], BN>;
    get_market_span: InvokeFunction<[], BN>;
    get_order_m: InvokeFunction<[order_id: string], Option<OrderOutput>>;
    get_total_trader_order_base_m: InvokeFunction<[trader: IdentityInput, base_token: AssetIdInput], I64Output>;
    get_trader_orders_m: InvokeFunction<[trader: IdentityInput, base_token: AssetIdInput], Vec<OrderOutput>>;
    get_twaps_m: InvokeFunction<[base_token: AssetIdInput], [Option<TwapOutput>, Option<TwapOutput>]>;
    has_active_orders_by_token_m: InvokeFunction<[trader: IdentityInput, base_token: AssetIdInput], boolean>;
    has_active_orders_m: InvokeFunction<[trader: IdentityInput], boolean>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
